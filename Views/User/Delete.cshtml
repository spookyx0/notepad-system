@model MyNotesApp.Models.UserModel

@{
    ViewData["Title"] = "Delete User";
}

<h1 class="text-4xl font-extrabold mb-6 text-center text-red-500 animate-fadeIn">Delete User</h1>

<div class="bg-gray-900 rounded-xl shadow-xl max-w-2xl mx-auto p-8 text-gray-200 animate-slideInUp">
    <h3 class="text-2xl text-center text-red-400 font-bold mb-6">Are you sure you want to delete this user?</h3>

    <div class="border border-gray-700 rounded-lg p-6 mb-6">
        <h4 class="text-lg text-gray-400 mb-4 font-semibold">User Information</h4>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-y-4 gap-x-8 text-lg">
            <!-- First Name -->
            <div>
                <p class="text-sm text-gray-400 font-medium">@Html.DisplayNameFor(model => model.FirstName)</p>
                <p class="font-semibold">@Html.DisplayFor(model => model.FirstName)</p>
            </div>
            <!-- Last Name -->
            <div>
                <p class="text-sm text-gray-400 font-medium">@Html.DisplayNameFor(model => model.LastName)</p>
                <p class="font-semibold">@Html.DisplayFor(model => model.LastName)</p>
            </div>
            <!-- Email -->
            <div>
                <p class="text-sm text-gray-400 font-medium">@Html.DisplayNameFor(model => model.Email)</p>
                <p class="font-semibold">@Html.DisplayFor(model => model.Email)</p>
            </div>
            <!-- Password -->
            <div>
                <p class="text-sm text-gray-400 font-medium">@Html.DisplayNameFor(model => model.Password)</p>
                <p class="font-semibold">@Html.DisplayFor(model => model.Password)</p>
            </div>
        </div>
    </div>

    <form asp-action="Delete" id="deleteForm">
        <input type="hidden" asp-for="UserId" />
        <div class="flex justify-center gap-4">
            <button type="button" id="openModal" 
                class="bg-red-600 text-white font-bold px-6 py-3 rounded-lg shadow-lg hover:bg-red-700 transition transform hover:-translate-y-1">
                Confirm Delete
            </button>

            <a asp-action="Index" 
               class="bg-gray-600 text-white font-semibold px-6 py-3 rounded-lg shadow hover:bg-gray-700 transition transform hover:-translate-y-1">
                Back to List
            </a>
        </div>
    </form>
</div>

<!-- Confirm Delete Modal -->
<div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50">
    <div class="bg-gray-800 rounded-lg shadow-xl p-8 max-w-md w-full text-center animate-fadeIn">
        <h2 class="text-2xl font-bold text-red-400 mb-4">Confirm Delete</h2>
        <p class="text-gray-300 mb-6">Are you sure you want to permanently delete this user?</p>
        <div class="flex justify-center gap-4">
            <button id="confirmDelete" 
                class="bg-red-600 text-white font-semibold px-5 py-2 rounded-lg hover:bg-red-700 transition">
                Yes, Delete
            </button>
            <button id="cancelModal" 
                class="bg-gray-600 text-white px-5 py-2 rounded-lg hover:bg-gray-700 transition">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Success Notification Modal -->
<div id="successModal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50">
    <div class="bg-green-700 text-white rounded-lg shadow-xl p-8 max-w-md w-full text-center animate-bounceIn">
        <h2 class="text-2xl font-bold mb-4">User Deleted Successfully</h2>
        <p class="text-gray-100">Redirecting back to users page...</p>
    </div>
</div>

@section Scripts {
    <script>
        const openModal = document.getElementById('openModal');
        const confirmModal = document.getElementById('confirmModal');
        const cancelModal = document.getElementById('cancelModal');
        const confirmDelete = document.getElementById('confirmDelete');
        const deleteForm = document.getElementById('deleteForm');
        const successModal = document.getElementById('successModal');

        openModal.addEventListener('click', () => {
            confirmModal.classList.remove('hidden');
        });

        cancelModal.addEventListener('click', () => {
            confirmModal.classList.add('hidden');
        });

        confirmDelete.addEventListener('click', () => {
            confirmModal.classList.add('hidden');
            successModal.classList.remove('hidden');

            // Submit form (simulate submit)
            setTimeout(() => {
                deleteForm.submit();
            }, 1000);

            // Redirect (client-side fallback)
            setTimeout(() => {
                window.location.href = '@Url.Action("Index", "User")';
            }, 3000);
        });
    </script>

    <style>
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .animate-fadeIn {
            animation: fadeIn 0.8s ease forwards;
        }

        @@keyframes slideInUp {
            from { opacity: 0; transform: translateY(40px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-slideInUp {
            animation: slideInUp 1s ease forwards;
        }

        @@keyframes bounceIn {
            0% { transform: scale(0.9); opacity: 0; }
            60% { transform: scale(1.05); opacity: 1; }
            100% { transform: scale(1); }
        }
        .animate-bounceIn {
            animation: bounceIn 0.8s ease forwards;
        }
    </style>
}
