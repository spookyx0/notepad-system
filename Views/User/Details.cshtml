@model MyNotesApp.Models.UserModel

@{
    ViewData["Title"] = "User Details";
}

<section class="min-h-screen flex items-center justify-center text-gray-300 px-4">
    <div class="relative group max-w-4xl w-full bg-gray-800 rounded-3xl overflow-hidden shadow-2xl hover:shadow-blue-700/40 transform transition-all duration-500 animate-fadeInUp flex flex-col md:flex-row">
        <div class="relative hidden md:flex flex-col justify-center items-center bg-gradient-to-t from-blue-800 to-blue-600 w-1/3 p-8 transform group-hover:scale-105 transition-transform duration-500">
            <img src="https://cdn-icons-png.flaticon.com/512/3135/3135715.png" alt="User Icon" class="w-24 h-24 mb-4 opacity-90 group-hover:opacity-100 transition duration-500" />
                <h2 class="text-xl font-semibold text-white tracking-wide">@Model.FirstName @Model.LastName</h2>
            <span class="mt-2 inline-block bg-green-500 text-white text-xs font-semibold px-3 py-1 rounded-full animate-bounce">Active User</span>
        </div>
        <div class="flex-1 p-10 md:p-12 relative animate-slideInUp">
            <div class="absolute top-0 left-0 w-0 h-1 bg-blue-500 group-hover:w-full transition-all duration-500"></div>

            <h1 class="text-3xl font-extrabold text-blue-400 mb-8 tracking-wide">User Details</h1>

            <div class="space-y-6">
                <div class="flex items-start">
                    <span class="w-36 text-gray-400 font-semibold">First Name:</span>
                    <span class="flex-1 text-lg text-white">@Html.DisplayFor(model => model.FirstName)</span>
                </div>
                <div class="flex items-start">
                    <span class="w-36 text-gray-400 font-semibold">Last Name:</span>
                    <span class="flex-1 text-lg text-white">@Html.DisplayFor(model => model.LastName)</span>
                </div>
                <div class="flex items-start">
                    <span class="w-36 text-gray-400 font-semibold">Email:</span>
                    <span class="flex-1 text-lg text-white">@Html.DisplayFor(model => model.Email)</span>
                </div>
                <div class="flex items-start">
                    <span class="w-36 text-gray-400 font-semibold">Password:</span>
                    <span class="flex-1 text-lg text-white">@Html.DisplayFor(model => model.Password)</span>
                </div>
            </div>

            <div class="mt-10 flex justify-center gap-6">
                <button onclick="openModal()" 
                        class="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-700 hover:scale-105 transition transform duration-300 text-white font-semibold shadow-lg hover:shadow-blue-700/40">
                    Edit
                </button>
                <a asp-action="Index"
                   class="px-6 py-3 rounded-lg bg-gray-600 hover:bg-gray-700 hover:scale-105 transition transform duration-300 text-white font-semibold shadow-lg hover:shadow-gray-700/40">
                    Back to List
                </a>
            </div>
        </div>
    </div>
</section>

<div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-gray-800 rounded-xl shadow-lg max-w-md w-full p-8 transform scale-95 opacity-0 transition-all duration-300 animate-modalIn">
        <h2 class="text-2xl font-bold text-white mb-4">Confirm Edit</h2>
        <p class="text-gray-300 mb-6">Are you sure you want to proceed to edit this user?</p>
        <div class="flex justify-end gap-4">
            <button onclick="closeModal()" 
                    class="px-4 py-2 rounded-lg bg-gray-600 hover:bg-gray-700 text-white transition">Cancel</button>
            <a id="confirmEditBtn"
               class="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-semibold transition"
               asp-action="Edit" asp-route-id="@Model?.UserId">
                Confirm
            </a>
        </div>
    </div>
</div>

<script>
    function openModal() {
        const modal = document.getElementById('confirmModal');
        modal.classList.remove('hidden');
        setTimeout(() => {
            modal.querySelector('div').classList.remove('scale-95', 'opacity-0');
            modal.querySelector('div').classList.add('scale-100', 'opacity-100');
        }, 10);
    }

    function closeModal() {
        const modalContent = document.querySelector('#confirmModal > div');
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
        setTimeout(() => {
            document.getElementById('confirmModal').classList.add('hidden');
        }, 300);
    }
</script>

<style>
    @@keyframes fadeInUp {
        0% { opacity: 0; transform: translateY(30px); }
        100% { opacity: 1; transform: translateY(0); }
    }
    .animate-fadeInUp { animation: fadeInUp 0.8s ease forwards; }

    @@keyframes slideInUp {
        0% { opacity: 0; transform: translateY(40px); }
        100% { opacity: 1; transform: translateY(0); }
    }
    .animate-slideInUp { animation: slideInUp 1s ease forwards; }

    @@keyframes modalIn {
        0% { transform: scale(0.9); opacity: 0; }
        100% { transform: scale(1); opacity: 1; }
    }
    .animate-modalIn { animation: modalIn 0.3s ease-out forwards; }
</style>
